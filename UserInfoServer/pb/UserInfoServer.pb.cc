// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfoServer.proto

#include "UserInfoServer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR UserInfo::UserInfo(
    ::_pbi::ConstantInitialized)
  : user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_gender_(0){}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_CONSTEXPR QuerySingleUserInfoRequest::QuerySingleUserInfoRequest(
    ::_pbi::ConstantInitialized)
  : user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct QuerySingleUserInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySingleUserInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySingleUserInfoRequestDefaultTypeInternal() {}
  union {
    QuerySingleUserInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySingleUserInfoRequestDefaultTypeInternal _QuerySingleUserInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR QuerySingleUserInfoResponse::QuerySingleUserInfoResponse(
    ::_pbi::ConstantInitialized)
  : ret_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_info_(nullptr)
  , ret_code_(0){}
struct QuerySingleUserInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySingleUserInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySingleUserInfoResponseDefaultTypeInternal() {}
  union {
    QuerySingleUserInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySingleUserInfoResponseDefaultTypeInternal _QuerySingleUserInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR AddSingleUserInfoRequset::AddSingleUserInfoRequset(
    ::_pbi::ConstantInitialized)
  : use_info_(nullptr){}
struct AddSingleUserInfoRequsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddSingleUserInfoRequsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddSingleUserInfoRequsetDefaultTypeInternal() {}
  union {
    AddSingleUserInfoRequset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddSingleUserInfoRequsetDefaultTypeInternal _AddSingleUserInfoRequset_default_instance_;
PROTOBUF_CONSTEXPR AddSingleUserInfoResponse::AddSingleUserInfoResponse(
    ::_pbi::ConstantInitialized)
  : ret_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , use_info_(nullptr)
  , ret_code_(0){}
struct AddSingleUserInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddSingleUserInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddSingleUserInfoResponseDefaultTypeInternal() {}
  union {
    AddSingleUserInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddSingleUserInfoResponseDefaultTypeInternal _AddSingleUserInfoResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_UserInfoServer_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_UserInfoServer_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_UserInfoServer_2eproto[1];

const uint32_t TableStruct_UserInfoServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UserInfo, user_id_),
  PROTOBUF_FIELD_OFFSET(::UserInfo, user_name_),
  PROTOBUF_FIELD_OFFSET(::UserInfo, user_gender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QuerySingleUserInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QuerySingleUserInfoRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QuerySingleUserInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QuerySingleUserInfoResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::QuerySingleUserInfoResponse, ret_info_),
  PROTOBUF_FIELD_OFFSET(::QuerySingleUserInfoResponse, user_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddSingleUserInfoRequset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AddSingleUserInfoRequset, use_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AddSingleUserInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AddSingleUserInfoResponse, ret_code_),
  PROTOBUF_FIELD_OFFSET(::AddSingleUserInfoResponse, ret_info_),
  PROTOBUF_FIELD_OFFSET(::AddSingleUserInfoResponse, use_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::UserInfo)},
  { 9, -1, -1, sizeof(::QuerySingleUserInfoRequest)},
  { 16, -1, -1, sizeof(::QuerySingleUserInfoResponse)},
  { 25, -1, -1, sizeof(::AddSingleUserInfoRequset)},
  { 32, -1, -1, sizeof(::AddSingleUserInfoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_UserInfo_default_instance_._instance,
  &::_QuerySingleUserInfoRequest_default_instance_._instance,
  &::_QuerySingleUserInfoResponse_default_instance_._instance,
  &::_AddSingleUserInfoRequset_default_instance_._instance,
  &::_AddSingleUserInfoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_UserInfoServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024UserInfoServer.proto\"C\n\010UserInfo\022\017\n\007us"
  "er_id\030\001 \001(\t\022\021\n\tuser_name\030\002 \001(\t\022\023\n\013user_g"
  "ender\030\003 \001(\005\"-\n\032QuerySingleUserInfoReques"
  "t\022\017\n\007user_id\030\001 \001(\t\"_\n\033QuerySingleUserInf"
  "oResponse\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010ret_info\030"
  "\002 \001(\t\022\034\n\tuser_info\030\003 \001(\0132\t.UserInfo\"7\n\030A"
  "ddSingleUserInfoRequset\022\033\n\010use_info\030\001 \001("
  "\0132\t.UserInfo\"\\\n\031AddSingleUserInfoRespons"
  "e\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010ret_info\030\002 \001(\t\022\033\n"
  "\010use_info\030\003 \001(\0132\t.UserInfo2\257\001\n\017UserInfoS"
  "ervice\022P\n\023QuerySingleUserInfo\022\033.QuerySin"
  "gleUserInfoRequest\032\034.QuerySingleUserInfo"
  "Response\022J\n\021AddSingleUserInfo\022\031.AddSingl"
  "eUserInfoRequset\032\032.AddSingleUserInfoResp"
  "onseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_UserInfoServer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_UserInfoServer_2eproto = {
    false, false, 577, descriptor_table_protodef_UserInfoServer_2eproto,
    "UserInfoServer.proto",
    &descriptor_table_UserInfoServer_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_UserInfoServer_2eproto::offsets,
    file_level_metadata_UserInfoServer_2eproto, file_level_enum_descriptors_UserInfoServer_2eproto,
    file_level_service_descriptors_UserInfoServer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_UserInfoServer_2eproto_getter() {
  return &descriptor_table_UserInfoServer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_UserInfoServer_2eproto(&descriptor_table_UserInfoServer_2eproto);

// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    user_name_.Set(from._internal_user_name(), 
      GetArenaForAllocation());
  }
  user_gender_ = from.user_gender_;
  // @@protoc_insertion_point(copy_constructor:UserInfo)
}

inline void UserInfo::SharedCtor() {
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_gender_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:UserInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.Destroy();
  user_name_.Destroy();
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  user_name_.ClearToEmpty();
  user_gender_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserInfo.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserInfo.user_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 user_gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          user_gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserInfo.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UserInfo.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // int32 user_gender = 3;
  if (this->_internal_user_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_gender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string user_name = 2;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // int32 user_gender = 3;
  if (this->_internal_user_gender() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_user_gender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UserInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserInfo::GetClassData() const { return &_class_data_; }

void UserInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UserInfo *>(to)->MergeFrom(
      static_cast<const UserInfo &>(from));
}


void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_user_gender() != 0) {
    _internal_set_user_gender(from._internal_user_gender());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  swap(user_gender_, other->user_gender_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserInfoServer_2eproto_getter, &descriptor_table_UserInfoServer_2eproto_once,
      file_level_metadata_UserInfoServer_2eproto[0]);
}

// ===================================================================

class QuerySingleUserInfoRequest::_Internal {
 public:
};

QuerySingleUserInfoRequest::QuerySingleUserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:QuerySingleUserInfoRequest)
}
QuerySingleUserInfoRequest::QuerySingleUserInfoRequest(const QuerySingleUserInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:QuerySingleUserInfoRequest)
}

inline void QuerySingleUserInfoRequest::SharedCtor() {
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QuerySingleUserInfoRequest::~QuerySingleUserInfoRequest() {
  // @@protoc_insertion_point(destructor:QuerySingleUserInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySingleUserInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.Destroy();
}

void QuerySingleUserInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuerySingleUserInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:QuerySingleUserInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySingleUserInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QuerySingleUserInfoRequest.user_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuerySingleUserInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuerySingleUserInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QuerySingleUserInfoRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuerySingleUserInfoRequest)
  return target;
}

size_t QuerySingleUserInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuerySingleUserInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySingleUserInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuerySingleUserInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySingleUserInfoRequest::GetClassData() const { return &_class_data_; }

void QuerySingleUserInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuerySingleUserInfoRequest *>(to)->MergeFrom(
      static_cast<const QuerySingleUserInfoRequest &>(from));
}


void QuerySingleUserInfoRequest::MergeFrom(const QuerySingleUserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QuerySingleUserInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySingleUserInfoRequest::CopyFrom(const QuerySingleUserInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuerySingleUserInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySingleUserInfoRequest::IsInitialized() const {
  return true;
}

void QuerySingleUserInfoRequest::InternalSwap(QuerySingleUserInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySingleUserInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserInfoServer_2eproto_getter, &descriptor_table_UserInfoServer_2eproto_once,
      file_level_metadata_UserInfoServer_2eproto[1]);
}

// ===================================================================

class QuerySingleUserInfoResponse::_Internal {
 public:
  static const ::UserInfo& user_info(const QuerySingleUserInfoResponse* msg);
};

const ::UserInfo&
QuerySingleUserInfoResponse::_Internal::user_info(const QuerySingleUserInfoResponse* msg) {
  return *msg->user_info_;
}
QuerySingleUserInfoResponse::QuerySingleUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:QuerySingleUserInfoResponse)
}
QuerySingleUserInfoResponse::QuerySingleUserInfoResponse(const QuerySingleUserInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ret_info().empty()) {
    ret_info_.Set(from._internal_ret_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_info()) {
    user_info_ = new ::UserInfo(*from.user_info_);
  } else {
    user_info_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:QuerySingleUserInfoResponse)
}

inline void QuerySingleUserInfoResponse::SharedCtor() {
ret_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&user_info_)) + sizeof(ret_code_));
}

QuerySingleUserInfoResponse::~QuerySingleUserInfoResponse() {
  // @@protoc_insertion_point(destructor:QuerySingleUserInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySingleUserInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ret_info_.Destroy();
  if (this != internal_default_instance()) delete user_info_;
}

void QuerySingleUserInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuerySingleUserInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:QuerySingleUserInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySingleUserInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ret_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ret_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QuerySingleUserInfoResponse.ret_info"));
        } else
          goto handle_unusual;
        continue;
      // .UserInfo user_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuerySingleUserInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QuerySingleUserInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string ret_info = 2;
  if (!this->_internal_ret_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ret_info().data(), static_cast<int>(this->_internal_ret_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QuerySingleUserInfoResponse.ret_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ret_info(), target);
  }

  // .UserInfo user_info = 3;
  if (this->_internal_has_user_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QuerySingleUserInfoResponse)
  return target;
}

size_t QuerySingleUserInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuerySingleUserInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ret_info = 2;
  if (!this->_internal_ret_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret_info());
  }

  // .UserInfo user_info = 3;
  if (this->_internal_has_user_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_info_);
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySingleUserInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuerySingleUserInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySingleUserInfoResponse::GetClassData() const { return &_class_data_; }

void QuerySingleUserInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuerySingleUserInfoResponse *>(to)->MergeFrom(
      static_cast<const QuerySingleUserInfoResponse &>(from));
}


void QuerySingleUserInfoResponse::MergeFrom(const QuerySingleUserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QuerySingleUserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ret_info().empty()) {
    _internal_set_ret_info(from._internal_ret_info());
  }
  if (from._internal_has_user_info()) {
    _internal_mutable_user_info()->::UserInfo::MergeFrom(from._internal_user_info());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySingleUserInfoResponse::CopyFrom(const QuerySingleUserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuerySingleUserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySingleUserInfoResponse::IsInitialized() const {
  return true;
}

void QuerySingleUserInfoResponse::InternalSwap(QuerySingleUserInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ret_info_, lhs_arena,
      &other->ret_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuerySingleUserInfoResponse, ret_code_)
      + sizeof(QuerySingleUserInfoResponse::ret_code_)
      - PROTOBUF_FIELD_OFFSET(QuerySingleUserInfoResponse, user_info_)>(
          reinterpret_cast<char*>(&user_info_),
          reinterpret_cast<char*>(&other->user_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySingleUserInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserInfoServer_2eproto_getter, &descriptor_table_UserInfoServer_2eproto_once,
      file_level_metadata_UserInfoServer_2eproto[2]);
}

// ===================================================================

class AddSingleUserInfoRequset::_Internal {
 public:
  static const ::UserInfo& use_info(const AddSingleUserInfoRequset* msg);
};

const ::UserInfo&
AddSingleUserInfoRequset::_Internal::use_info(const AddSingleUserInfoRequset* msg) {
  return *msg->use_info_;
}
AddSingleUserInfoRequset::AddSingleUserInfoRequset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AddSingleUserInfoRequset)
}
AddSingleUserInfoRequset::AddSingleUserInfoRequset(const AddSingleUserInfoRequset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_use_info()) {
    use_info_ = new ::UserInfo(*from.use_info_);
  } else {
    use_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AddSingleUserInfoRequset)
}

inline void AddSingleUserInfoRequset::SharedCtor() {
use_info_ = nullptr;
}

AddSingleUserInfoRequset::~AddSingleUserInfoRequset() {
  // @@protoc_insertion_point(destructor:AddSingleUserInfoRequset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddSingleUserInfoRequset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete use_info_;
}

void AddSingleUserInfoRequset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSingleUserInfoRequset::Clear() {
// @@protoc_insertion_point(message_clear_start:AddSingleUserInfoRequset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && use_info_ != nullptr) {
    delete use_info_;
  }
  use_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSingleUserInfoRequset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .UserInfo use_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddSingleUserInfoRequset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddSingleUserInfoRequset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .UserInfo use_info = 1;
  if (this->_internal_has_use_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::use_info(this),
        _Internal::use_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddSingleUserInfoRequset)
  return target;
}

size_t AddSingleUserInfoRequset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddSingleUserInfoRequset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .UserInfo use_info = 1;
  if (this->_internal_has_use_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSingleUserInfoRequset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddSingleUserInfoRequset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSingleUserInfoRequset::GetClassData() const { return &_class_data_; }

void AddSingleUserInfoRequset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddSingleUserInfoRequset *>(to)->MergeFrom(
      static_cast<const AddSingleUserInfoRequset &>(from));
}


void AddSingleUserInfoRequset::MergeFrom(const AddSingleUserInfoRequset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddSingleUserInfoRequset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_use_info()) {
    _internal_mutable_use_info()->::UserInfo::MergeFrom(from._internal_use_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddSingleUserInfoRequset::CopyFrom(const AddSingleUserInfoRequset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddSingleUserInfoRequset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSingleUserInfoRequset::IsInitialized() const {
  return true;
}

void AddSingleUserInfoRequset::InternalSwap(AddSingleUserInfoRequset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(use_info_, other->use_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSingleUserInfoRequset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserInfoServer_2eproto_getter, &descriptor_table_UserInfoServer_2eproto_once,
      file_level_metadata_UserInfoServer_2eproto[3]);
}

// ===================================================================

class AddSingleUserInfoResponse::_Internal {
 public:
  static const ::UserInfo& use_info(const AddSingleUserInfoResponse* msg);
};

const ::UserInfo&
AddSingleUserInfoResponse::_Internal::use_info(const AddSingleUserInfoResponse* msg) {
  return *msg->use_info_;
}
AddSingleUserInfoResponse::AddSingleUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:AddSingleUserInfoResponse)
}
AddSingleUserInfoResponse::AddSingleUserInfoResponse(const AddSingleUserInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ret_info().empty()) {
    ret_info_.Set(from._internal_ret_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_use_info()) {
    use_info_ = new ::UserInfo(*from.use_info_);
  } else {
    use_info_ = nullptr;
  }
  ret_code_ = from.ret_code_;
  // @@protoc_insertion_point(copy_constructor:AddSingleUserInfoResponse)
}

inline void AddSingleUserInfoResponse::SharedCtor() {
ret_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&use_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_code_) -
    reinterpret_cast<char*>(&use_info_)) + sizeof(ret_code_));
}

AddSingleUserInfoResponse::~AddSingleUserInfoResponse() {
  // @@protoc_insertion_point(destructor:AddSingleUserInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddSingleUserInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ret_info_.Destroy();
  if (this != internal_default_instance()) delete use_info_;
}

void AddSingleUserInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSingleUserInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AddSingleUserInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && use_info_ != nullptr) {
    delete use_info_;
  }
  use_info_ = nullptr;
  ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSingleUserInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ret_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ret_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "AddSingleUserInfoResponse.ret_info"));
        } else
          goto handle_unusual;
        continue;
      // .UserInfo use_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_use_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddSingleUserInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AddSingleUserInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string ret_info = 2;
  if (!this->_internal_ret_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ret_info().data(), static_cast<int>(this->_internal_ret_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AddSingleUserInfoResponse.ret_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ret_info(), target);
  }

  // .UserInfo use_info = 3;
  if (this->_internal_has_use_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::use_info(this),
        _Internal::use_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddSingleUserInfoResponse)
  return target;
}

size_t AddSingleUserInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddSingleUserInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ret_info = 2;
  if (!this->_internal_ret_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret_info());
  }

  // .UserInfo use_info = 3;
  if (this->_internal_has_use_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *use_info_);
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSingleUserInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddSingleUserInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSingleUserInfoResponse::GetClassData() const { return &_class_data_; }

void AddSingleUserInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddSingleUserInfoResponse *>(to)->MergeFrom(
      static_cast<const AddSingleUserInfoResponse &>(from));
}


void AddSingleUserInfoResponse::MergeFrom(const AddSingleUserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddSingleUserInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ret_info().empty()) {
    _internal_set_ret_info(from._internal_ret_info());
  }
  if (from._internal_has_use_info()) {
    _internal_mutable_use_info()->::UserInfo::MergeFrom(from._internal_use_info());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddSingleUserInfoResponse::CopyFrom(const AddSingleUserInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddSingleUserInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSingleUserInfoResponse::IsInitialized() const {
  return true;
}

void AddSingleUserInfoResponse::InternalSwap(AddSingleUserInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ret_info_, lhs_arena,
      &other->ret_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddSingleUserInfoResponse, ret_code_)
      + sizeof(AddSingleUserInfoResponse::ret_code_)
      - PROTOBUF_FIELD_OFFSET(AddSingleUserInfoResponse, use_info_)>(
          reinterpret_cast<char*>(&use_info_),
          reinterpret_cast<char*>(&other->use_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSingleUserInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_UserInfoServer_2eproto_getter, &descriptor_table_UserInfoServer_2eproto_once,
      file_level_metadata_UserInfoServer_2eproto[4]);
}

// ===================================================================

UserInfoService::~UserInfoService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserInfoService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_UserInfoServer_2eproto);
  return file_level_service_descriptors_UserInfoServer_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserInfoService::GetDescriptor() {
  return descriptor();
}

void UserInfoService::QuerySingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::QuerySingleUserInfoRequest*,
                         ::QuerySingleUserInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QuerySingleUserInfo() not implemented.");
  done->Run();
}

void UserInfoService::AddSingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::AddSingleUserInfoRequset*,
                         ::AddSingleUserInfoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddSingleUserInfo() not implemented.");
  done->Run();
}

void UserInfoService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_UserInfoServer_2eproto[0]);
  switch(method->index()) {
    case 0:
      QuerySingleUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::QuerySingleUserInfoRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::QuerySingleUserInfoResponse*>(
                 response),
             done);
      break;
    case 1:
      AddSingleUserInfo(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::AddSingleUserInfoRequset*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::AddSingleUserInfoResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserInfoService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::QuerySingleUserInfoRequest::default_instance();
    case 1:
      return ::AddSingleUserInfoRequset::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserInfoService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::QuerySingleUserInfoResponse::default_instance();
    case 1:
      return ::AddSingleUserInfoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserInfoService_Stub::UserInfoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserInfoService_Stub::UserInfoService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserInfoService_Stub::~UserInfoService_Stub() {
  if (owns_channel_) delete channel_;
}

void UserInfoService_Stub::QuerySingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::QuerySingleUserInfoRequest* request,
                              ::QuerySingleUserInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserInfoService_Stub::AddSingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::AddSingleUserInfoRequset* request,
                              ::AddSingleUserInfoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserInfo*
Arena::CreateMaybeMessage< ::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::QuerySingleUserInfoRequest*
Arena::CreateMaybeMessage< ::QuerySingleUserInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QuerySingleUserInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::QuerySingleUserInfoResponse*
Arena::CreateMaybeMessage< ::QuerySingleUserInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QuerySingleUserInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AddSingleUserInfoRequset*
Arena::CreateMaybeMessage< ::AddSingleUserInfoRequset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AddSingleUserInfoRequset >(arena);
}
template<> PROTOBUF_NOINLINE ::AddSingleUserInfoResponse*
Arena::CreateMaybeMessage< ::AddSingleUserInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AddSingleUserInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
