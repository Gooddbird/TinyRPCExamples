// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfoServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserInfoServer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserInfoServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserInfoServer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserInfoServer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserInfoServer_2eproto;
class AddSingleUserInfoRequset;
struct AddSingleUserInfoRequsetDefaultTypeInternal;
extern AddSingleUserInfoRequsetDefaultTypeInternal _AddSingleUserInfoRequset_default_instance_;
class AddSingleUserInfoResponse;
struct AddSingleUserInfoResponseDefaultTypeInternal;
extern AddSingleUserInfoResponseDefaultTypeInternal _AddSingleUserInfoResponse_default_instance_;
class QuerySingleUserInfoRequest;
struct QuerySingleUserInfoRequestDefaultTypeInternal;
extern QuerySingleUserInfoRequestDefaultTypeInternal _QuerySingleUserInfoRequest_default_instance_;
class QuerySingleUserInfoResponse;
struct QuerySingleUserInfoResponseDefaultTypeInternal;
extern QuerySingleUserInfoResponseDefaultTypeInternal _QuerySingleUserInfoResponse_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddSingleUserInfoRequset* Arena::CreateMaybeMessage<::AddSingleUserInfoRequset>(Arena*);
template<> ::AddSingleUserInfoResponse* Arena::CreateMaybeMessage<::AddSingleUserInfoResponse>(Arena*);
template<> ::QuerySingleUserInfoRequest* Arena::CreateMaybeMessage<::QuerySingleUserInfoRequest>(Arena*);
template<> ::QuerySingleUserInfoResponse* Arena::CreateMaybeMessage<::QuerySingleUserInfoResponse>(Arena*);
template<> ::UserInfo* Arena::CreateMaybeMessage<::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserNameFieldNumber = 2,
    kUserGenderFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 user_gender = 3;
  void clear_user_gender();
  int32_t user_gender() const;
  void set_user_gender(int32_t value);
  private:
  int32_t _internal_user_gender() const;
  void _internal_set_user_gender(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  int32_t user_gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserInfoServer_2eproto;
};
// -------------------------------------------------------------------

class QuerySingleUserInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QuerySingleUserInfoRequest) */ {
 public:
  inline QuerySingleUserInfoRequest() : QuerySingleUserInfoRequest(nullptr) {}
  ~QuerySingleUserInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR QuerySingleUserInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySingleUserInfoRequest(const QuerySingleUserInfoRequest& from);
  QuerySingleUserInfoRequest(QuerySingleUserInfoRequest&& from) noexcept
    : QuerySingleUserInfoRequest() {
    *this = ::std::move(from);
  }

  inline QuerySingleUserInfoRequest& operator=(const QuerySingleUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySingleUserInfoRequest& operator=(QuerySingleUserInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySingleUserInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySingleUserInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySingleUserInfoRequest*>(
               &_QuerySingleUserInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QuerySingleUserInfoRequest& a, QuerySingleUserInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySingleUserInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySingleUserInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySingleUserInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySingleUserInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySingleUserInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QuerySingleUserInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySingleUserInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuerySingleUserInfoRequest";
  }
  protected:
  explicit QuerySingleUserInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:QuerySingleUserInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserInfoServer_2eproto;
};
// -------------------------------------------------------------------

class QuerySingleUserInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QuerySingleUserInfoResponse) */ {
 public:
  inline QuerySingleUserInfoResponse() : QuerySingleUserInfoResponse(nullptr) {}
  ~QuerySingleUserInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR QuerySingleUserInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySingleUserInfoResponse(const QuerySingleUserInfoResponse& from);
  QuerySingleUserInfoResponse(QuerySingleUserInfoResponse&& from) noexcept
    : QuerySingleUserInfoResponse() {
    *this = ::std::move(from);
  }

  inline QuerySingleUserInfoResponse& operator=(const QuerySingleUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySingleUserInfoResponse& operator=(QuerySingleUserInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySingleUserInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySingleUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySingleUserInfoResponse*>(
               &_QuerySingleUserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuerySingleUserInfoResponse& a, QuerySingleUserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySingleUserInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySingleUserInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySingleUserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySingleUserInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySingleUserInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QuerySingleUserInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySingleUserInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QuerySingleUserInfoResponse";
  }
  protected:
  explicit QuerySingleUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetInfoFieldNumber = 2,
    kUserInfoFieldNumber = 3,
    kRetCodeFieldNumber = 1,
  };
  // string ret_info = 2;
  void clear_ret_info();
  const std::string& ret_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret_info();
  PROTOBUF_NODISCARD std::string* release_ret_info();
  void set_allocated_ret_info(std::string* ret_info);
  private:
  const std::string& _internal_ret_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret_info(const std::string& value);
  std::string* _internal_mutable_ret_info();
  public:

  // .UserInfo user_info = 3;
  bool has_user_info() const;
  private:
  bool _internal_has_user_info() const;
  public:
  void clear_user_info();
  const ::UserInfo& user_info() const;
  PROTOBUF_NODISCARD ::UserInfo* release_user_info();
  ::UserInfo* mutable_user_info();
  void set_allocated_user_info(::UserInfo* user_info);
  private:
  const ::UserInfo& _internal_user_info() const;
  ::UserInfo* _internal_mutable_user_info();
  public:
  void unsafe_arena_set_allocated_user_info(
      ::UserInfo* user_info);
  ::UserInfo* unsafe_arena_release_user_info();

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QuerySingleUserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_info_;
  ::UserInfo* user_info_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserInfoServer_2eproto;
};
// -------------------------------------------------------------------

class AddSingleUserInfoRequset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddSingleUserInfoRequset) */ {
 public:
  inline AddSingleUserInfoRequset() : AddSingleUserInfoRequset(nullptr) {}
  ~AddSingleUserInfoRequset() override;
  explicit PROTOBUF_CONSTEXPR AddSingleUserInfoRequset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSingleUserInfoRequset(const AddSingleUserInfoRequset& from);
  AddSingleUserInfoRequset(AddSingleUserInfoRequset&& from) noexcept
    : AddSingleUserInfoRequset() {
    *this = ::std::move(from);
  }

  inline AddSingleUserInfoRequset& operator=(const AddSingleUserInfoRequset& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSingleUserInfoRequset& operator=(AddSingleUserInfoRequset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddSingleUserInfoRequset& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSingleUserInfoRequset* internal_default_instance() {
    return reinterpret_cast<const AddSingleUserInfoRequset*>(
               &_AddSingleUserInfoRequset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddSingleUserInfoRequset& a, AddSingleUserInfoRequset& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSingleUserInfoRequset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSingleUserInfoRequset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddSingleUserInfoRequset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddSingleUserInfoRequset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddSingleUserInfoRequset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddSingleUserInfoRequset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSingleUserInfoRequset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddSingleUserInfoRequset";
  }
  protected:
  explicit AddSingleUserInfoRequset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseInfoFieldNumber = 1,
  };
  // .UserInfo use_info = 1;
  bool has_use_info() const;
  private:
  bool _internal_has_use_info() const;
  public:
  void clear_use_info();
  const ::UserInfo& use_info() const;
  PROTOBUF_NODISCARD ::UserInfo* release_use_info();
  ::UserInfo* mutable_use_info();
  void set_allocated_use_info(::UserInfo* use_info);
  private:
  const ::UserInfo& _internal_use_info() const;
  ::UserInfo* _internal_mutable_use_info();
  public:
  void unsafe_arena_set_allocated_use_info(
      ::UserInfo* use_info);
  ::UserInfo* unsafe_arena_release_use_info();

  // @@protoc_insertion_point(class_scope:AddSingleUserInfoRequset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::UserInfo* use_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserInfoServer_2eproto;
};
// -------------------------------------------------------------------

class AddSingleUserInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddSingleUserInfoResponse) */ {
 public:
  inline AddSingleUserInfoResponse() : AddSingleUserInfoResponse(nullptr) {}
  ~AddSingleUserInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR AddSingleUserInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddSingleUserInfoResponse(const AddSingleUserInfoResponse& from);
  AddSingleUserInfoResponse(AddSingleUserInfoResponse&& from) noexcept
    : AddSingleUserInfoResponse() {
    *this = ::std::move(from);
  }

  inline AddSingleUserInfoResponse& operator=(const AddSingleUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddSingleUserInfoResponse& operator=(AddSingleUserInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddSingleUserInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddSingleUserInfoResponse* internal_default_instance() {
    return reinterpret_cast<const AddSingleUserInfoResponse*>(
               &_AddSingleUserInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddSingleUserInfoResponse& a, AddSingleUserInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddSingleUserInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddSingleUserInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddSingleUserInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddSingleUserInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddSingleUserInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddSingleUserInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddSingleUserInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddSingleUserInfoResponse";
  }
  protected:
  explicit AddSingleUserInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetInfoFieldNumber = 2,
    kUseInfoFieldNumber = 3,
    kRetCodeFieldNumber = 1,
  };
  // string ret_info = 2;
  void clear_ret_info();
  const std::string& ret_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret_info();
  PROTOBUF_NODISCARD std::string* release_ret_info();
  void set_allocated_ret_info(std::string* ret_info);
  private:
  const std::string& _internal_ret_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret_info(const std::string& value);
  std::string* _internal_mutable_ret_info();
  public:

  // .UserInfo use_info = 3;
  bool has_use_info() const;
  private:
  bool _internal_has_use_info() const;
  public:
  void clear_use_info();
  const ::UserInfo& use_info() const;
  PROTOBUF_NODISCARD ::UserInfo* release_use_info();
  ::UserInfo* mutable_use_info();
  void set_allocated_use_info(::UserInfo* use_info);
  private:
  const ::UserInfo& _internal_use_info() const;
  ::UserInfo* _internal_mutable_use_info();
  public:
  void unsafe_arena_set_allocated_use_info(
      ::UserInfo* use_info);
  ::UserInfo* unsafe_arena_release_use_info();

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AddSingleUserInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_info_;
  ::UserInfo* use_info_;
  int32_t ret_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_UserInfoServer_2eproto;
};
// ===================================================================

class UserInfoService_Stub;

class UserInfoService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserInfoService() {};
 public:
  virtual ~UserInfoService();

  typedef UserInfoService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void QuerySingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::QuerySingleUserInfoRequest* request,
                       ::QuerySingleUserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddSingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AddSingleUserInfoRequset* request,
                       ::AddSingleUserInfoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserInfoService);
};

class UserInfoService_Stub : public UserInfoService {
 public:
  UserInfoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserInfoService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserInfoService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserInfoService ------------------------------------------

  void QuerySingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::QuerySingleUserInfoRequest* request,
                       ::QuerySingleUserInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void AddSingleUserInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::AddSingleUserInfoRequset* request,
                       ::AddSingleUserInfoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserInfoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string user_id = 1;
inline void UserInfo::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfo.user_id)
}
inline std::string* UserInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:UserInfo.user_id)
  return _s;
}
inline const std::string& UserInfo::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserInfo::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_id() {
  
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:UserInfo.user_id)
  return user_id_.Release();
}
inline void UserInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_id)
}

// string user_name = 2;
inline void UserInfo::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& UserInfo::user_name() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UserInfo.user_name)
}
inline std::string* UserInfo::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:UserInfo.user_name)
  return _s;
}
inline const std::string& UserInfo::_internal_user_name() const {
  return user_name_.Get();
}
inline void UserInfo::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_name() {
  
  return user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:UserInfo.user_name)
  return user_name_.Release();
}
inline void UserInfo::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault()) {
    user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_name)
}

// int32 user_gender = 3;
inline void UserInfo::clear_user_gender() {
  user_gender_ = 0;
}
inline int32_t UserInfo::_internal_user_gender() const {
  return user_gender_;
}
inline int32_t UserInfo::user_gender() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_gender)
  return _internal_user_gender();
}
inline void UserInfo::_internal_set_user_gender(int32_t value) {
  
  user_gender_ = value;
}
inline void UserInfo::set_user_gender(int32_t value) {
  _internal_set_user_gender(value);
  // @@protoc_insertion_point(field_set:UserInfo.user_gender)
}

// -------------------------------------------------------------------

// QuerySingleUserInfoRequest

// string user_id = 1;
inline void QuerySingleUserInfoRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& QuerySingleUserInfoRequest::user_id() const {
  // @@protoc_insertion_point(field_get:QuerySingleUserInfoRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuerySingleUserInfoRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuerySingleUserInfoRequest.user_id)
}
inline std::string* QuerySingleUserInfoRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:QuerySingleUserInfoRequest.user_id)
  return _s;
}
inline const std::string& QuerySingleUserInfoRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void QuerySingleUserInfoRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySingleUserInfoRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* QuerySingleUserInfoRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:QuerySingleUserInfoRequest.user_id)
  return user_id_.Release();
}
inline void QuerySingleUserInfoRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_id_.IsDefault()) {
    user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuerySingleUserInfoRequest.user_id)
}

// -------------------------------------------------------------------

// QuerySingleUserInfoResponse

// int32 ret_code = 1;
inline void QuerySingleUserInfoResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t QuerySingleUserInfoResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t QuerySingleUserInfoResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:QuerySingleUserInfoResponse.ret_code)
  return _internal_ret_code();
}
inline void QuerySingleUserInfoResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void QuerySingleUserInfoResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:QuerySingleUserInfoResponse.ret_code)
}

// string ret_info = 2;
inline void QuerySingleUserInfoResponse::clear_ret_info() {
  ret_info_.ClearToEmpty();
}
inline const std::string& QuerySingleUserInfoResponse::ret_info() const {
  // @@protoc_insertion_point(field_get:QuerySingleUserInfoResponse.ret_info)
  return _internal_ret_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QuerySingleUserInfoResponse::set_ret_info(ArgT0&& arg0, ArgT... args) {
 
 ret_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QuerySingleUserInfoResponse.ret_info)
}
inline std::string* QuerySingleUserInfoResponse::mutable_ret_info() {
  std::string* _s = _internal_mutable_ret_info();
  // @@protoc_insertion_point(field_mutable:QuerySingleUserInfoResponse.ret_info)
  return _s;
}
inline const std::string& QuerySingleUserInfoResponse::_internal_ret_info() const {
  return ret_info_.Get();
}
inline void QuerySingleUserInfoResponse::_internal_set_ret_info(const std::string& value) {
  
  ret_info_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySingleUserInfoResponse::_internal_mutable_ret_info() {
  
  return ret_info_.Mutable(GetArenaForAllocation());
}
inline std::string* QuerySingleUserInfoResponse::release_ret_info() {
  // @@protoc_insertion_point(field_release:QuerySingleUserInfoResponse.ret_info)
  return ret_info_.Release();
}
inline void QuerySingleUserInfoResponse::set_allocated_ret_info(std::string* ret_info) {
  if (ret_info != nullptr) {
    
  } else {
    
  }
  ret_info_.SetAllocated(ret_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_info_.IsDefault()) {
    ret_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuerySingleUserInfoResponse.ret_info)
}

// .UserInfo user_info = 3;
inline bool QuerySingleUserInfoResponse::_internal_has_user_info() const {
  return this != internal_default_instance() && user_info_ != nullptr;
}
inline bool QuerySingleUserInfoResponse::has_user_info() const {
  return _internal_has_user_info();
}
inline void QuerySingleUserInfoResponse::clear_user_info() {
  if (GetArenaForAllocation() == nullptr && user_info_ != nullptr) {
    delete user_info_;
  }
  user_info_ = nullptr;
}
inline const ::UserInfo& QuerySingleUserInfoResponse::_internal_user_info() const {
  const ::UserInfo* p = user_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserInfo&>(
      ::_UserInfo_default_instance_);
}
inline const ::UserInfo& QuerySingleUserInfoResponse::user_info() const {
  // @@protoc_insertion_point(field_get:QuerySingleUserInfoResponse.user_info)
  return _internal_user_info();
}
inline void QuerySingleUserInfoResponse::unsafe_arena_set_allocated_user_info(
    ::UserInfo* user_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_info_);
  }
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QuerySingleUserInfoResponse.user_info)
}
inline ::UserInfo* QuerySingleUserInfoResponse::release_user_info() {
  
  ::UserInfo* temp = user_info_;
  user_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserInfo* QuerySingleUserInfoResponse::unsafe_arena_release_user_info() {
  // @@protoc_insertion_point(field_release:QuerySingleUserInfoResponse.user_info)
  
  ::UserInfo* temp = user_info_;
  user_info_ = nullptr;
  return temp;
}
inline ::UserInfo* QuerySingleUserInfoResponse::_internal_mutable_user_info() {
  
  if (user_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserInfo>(GetArenaForAllocation());
    user_info_ = p;
  }
  return user_info_;
}
inline ::UserInfo* QuerySingleUserInfoResponse::mutable_user_info() {
  ::UserInfo* _msg = _internal_mutable_user_info();
  // @@protoc_insertion_point(field_mutable:QuerySingleUserInfoResponse.user_info)
  return _msg;
}
inline void QuerySingleUserInfoResponse::set_allocated_user_info(::UserInfo* user_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_info_;
  }
  if (user_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_info);
    if (message_arena != submessage_arena) {
      user_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:QuerySingleUserInfoResponse.user_info)
}

// -------------------------------------------------------------------

// AddSingleUserInfoRequset

// .UserInfo use_info = 1;
inline bool AddSingleUserInfoRequset::_internal_has_use_info() const {
  return this != internal_default_instance() && use_info_ != nullptr;
}
inline bool AddSingleUserInfoRequset::has_use_info() const {
  return _internal_has_use_info();
}
inline void AddSingleUserInfoRequset::clear_use_info() {
  if (GetArenaForAllocation() == nullptr && use_info_ != nullptr) {
    delete use_info_;
  }
  use_info_ = nullptr;
}
inline const ::UserInfo& AddSingleUserInfoRequset::_internal_use_info() const {
  const ::UserInfo* p = use_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserInfo&>(
      ::_UserInfo_default_instance_);
}
inline const ::UserInfo& AddSingleUserInfoRequset::use_info() const {
  // @@protoc_insertion_point(field_get:AddSingleUserInfoRequset.use_info)
  return _internal_use_info();
}
inline void AddSingleUserInfoRequset::unsafe_arena_set_allocated_use_info(
    ::UserInfo* use_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_info_);
  }
  use_info_ = use_info;
  if (use_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AddSingleUserInfoRequset.use_info)
}
inline ::UserInfo* AddSingleUserInfoRequset::release_use_info() {
  
  ::UserInfo* temp = use_info_;
  use_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserInfo* AddSingleUserInfoRequset::unsafe_arena_release_use_info() {
  // @@protoc_insertion_point(field_release:AddSingleUserInfoRequset.use_info)
  
  ::UserInfo* temp = use_info_;
  use_info_ = nullptr;
  return temp;
}
inline ::UserInfo* AddSingleUserInfoRequset::_internal_mutable_use_info() {
  
  if (use_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserInfo>(GetArenaForAllocation());
    use_info_ = p;
  }
  return use_info_;
}
inline ::UserInfo* AddSingleUserInfoRequset::mutable_use_info() {
  ::UserInfo* _msg = _internal_mutable_use_info();
  // @@protoc_insertion_point(field_mutable:AddSingleUserInfoRequset.use_info)
  return _msg;
}
inline void AddSingleUserInfoRequset::set_allocated_use_info(::UserInfo* use_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete use_info_;
  }
  if (use_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(use_info);
    if (message_arena != submessage_arena) {
      use_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_info, submessage_arena);
    }
    
  } else {
    
  }
  use_info_ = use_info;
  // @@protoc_insertion_point(field_set_allocated:AddSingleUserInfoRequset.use_info)
}

// -------------------------------------------------------------------

// AddSingleUserInfoResponse

// int32 ret_code = 1;
inline void AddSingleUserInfoResponse::clear_ret_code() {
  ret_code_ = 0;
}
inline int32_t AddSingleUserInfoResponse::_internal_ret_code() const {
  return ret_code_;
}
inline int32_t AddSingleUserInfoResponse::ret_code() const {
  // @@protoc_insertion_point(field_get:AddSingleUserInfoResponse.ret_code)
  return _internal_ret_code();
}
inline void AddSingleUserInfoResponse::_internal_set_ret_code(int32_t value) {
  
  ret_code_ = value;
}
inline void AddSingleUserInfoResponse::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:AddSingleUserInfoResponse.ret_code)
}

// string ret_info = 2;
inline void AddSingleUserInfoResponse::clear_ret_info() {
  ret_info_.ClearToEmpty();
}
inline const std::string& AddSingleUserInfoResponse::ret_info() const {
  // @@protoc_insertion_point(field_get:AddSingleUserInfoResponse.ret_info)
  return _internal_ret_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddSingleUserInfoResponse::set_ret_info(ArgT0&& arg0, ArgT... args) {
 
 ret_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AddSingleUserInfoResponse.ret_info)
}
inline std::string* AddSingleUserInfoResponse::mutable_ret_info() {
  std::string* _s = _internal_mutable_ret_info();
  // @@protoc_insertion_point(field_mutable:AddSingleUserInfoResponse.ret_info)
  return _s;
}
inline const std::string& AddSingleUserInfoResponse::_internal_ret_info() const {
  return ret_info_.Get();
}
inline void AddSingleUserInfoResponse::_internal_set_ret_info(const std::string& value) {
  
  ret_info_.Set(value, GetArenaForAllocation());
}
inline std::string* AddSingleUserInfoResponse::_internal_mutable_ret_info() {
  
  return ret_info_.Mutable(GetArenaForAllocation());
}
inline std::string* AddSingleUserInfoResponse::release_ret_info() {
  // @@protoc_insertion_point(field_release:AddSingleUserInfoResponse.ret_info)
  return ret_info_.Release();
}
inline void AddSingleUserInfoResponse::set_allocated_ret_info(std::string* ret_info) {
  if (ret_info != nullptr) {
    
  } else {
    
  }
  ret_info_.SetAllocated(ret_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_info_.IsDefault()) {
    ret_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AddSingleUserInfoResponse.ret_info)
}

// .UserInfo use_info = 3;
inline bool AddSingleUserInfoResponse::_internal_has_use_info() const {
  return this != internal_default_instance() && use_info_ != nullptr;
}
inline bool AddSingleUserInfoResponse::has_use_info() const {
  return _internal_has_use_info();
}
inline void AddSingleUserInfoResponse::clear_use_info() {
  if (GetArenaForAllocation() == nullptr && use_info_ != nullptr) {
    delete use_info_;
  }
  use_info_ = nullptr;
}
inline const ::UserInfo& AddSingleUserInfoResponse::_internal_use_info() const {
  const ::UserInfo* p = use_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::UserInfo&>(
      ::_UserInfo_default_instance_);
}
inline const ::UserInfo& AddSingleUserInfoResponse::use_info() const {
  // @@protoc_insertion_point(field_get:AddSingleUserInfoResponse.use_info)
  return _internal_use_info();
}
inline void AddSingleUserInfoResponse::unsafe_arena_set_allocated_use_info(
    ::UserInfo* use_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(use_info_);
  }
  use_info_ = use_info;
  if (use_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AddSingleUserInfoResponse.use_info)
}
inline ::UserInfo* AddSingleUserInfoResponse::release_use_info() {
  
  ::UserInfo* temp = use_info_;
  use_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::UserInfo* AddSingleUserInfoResponse::unsafe_arena_release_use_info() {
  // @@protoc_insertion_point(field_release:AddSingleUserInfoResponse.use_info)
  
  ::UserInfo* temp = use_info_;
  use_info_ = nullptr;
  return temp;
}
inline ::UserInfo* AddSingleUserInfoResponse::_internal_mutable_use_info() {
  
  if (use_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::UserInfo>(GetArenaForAllocation());
    use_info_ = p;
  }
  return use_info_;
}
inline ::UserInfo* AddSingleUserInfoResponse::mutable_use_info() {
  ::UserInfo* _msg = _internal_mutable_use_info();
  // @@protoc_insertion_point(field_mutable:AddSingleUserInfoResponse.use_info)
  return _msg;
}
inline void AddSingleUserInfoResponse::set_allocated_use_info(::UserInfo* use_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete use_info_;
  }
  if (use_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(use_info);
    if (message_arena != submessage_arena) {
      use_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, use_info, submessage_arena);
    }
    
  } else {
    
  }
  use_info_ = use_info;
  // @@protoc_insertion_point(field_set_allocated:AddSingleUserInfoResponse.use_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserInfoServer_2eproto
